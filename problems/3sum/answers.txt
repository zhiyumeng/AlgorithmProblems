1、暴力求解，超时
class Solution1 {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
      set<vector<int>>rs_set;
        //尝试暴力遍历,超时
    sort(nums.begin(),nums.end());
    for(int i=0;i<nums.size();i++)
        for(int j=i+1;j<nums.size();j++)
            for(int k=j+1;k<nums.size();k++)
                if(nums[i] + nums[j] + nums[k] == 0) {
                    vector<int> triplet = {nums[i], nums[j], nums[k]};
                    rs_set.insert(triplet);
                }
     vector<vector<int>> rs(rs_set.begin(),rs_set.end());
        return rs;
    }

};

2、参考https://leetcode.com/problems/3sum/discuss/7402/Share-my-AC-C++-solution-around-50ms-O(N*N)-with-explanation-and-comments，
将问题转化为求two-sum.
class Solution2 {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> rs;

         sort(nums.begin(),nums.end());

         for(int i=0;i<nums.size();i++){
             int target = -nums[i];
             int front = i+1, rear = nums.size() -1;
             int sum2;
             while(front < rear){
                 sum2 = nums[front] + nums[rear];
                 if(sum2 < target) front++;
                 else if(sum2 > target) rear--;
                 else {
                     vector<int>triplet = {nums[i], nums[front], nums[rear]};
                     rs.push_back(triplet);
                     while(front < rear && nums[front] == triplet[1]) front++;
                     while (rear > front &&nums[rear] == triplet[2]) rear--;
                 }
             }
             while(i+1<nums.size() && nums[i+1] == nums[i]) i++;
         }
        return rs;
    }
};